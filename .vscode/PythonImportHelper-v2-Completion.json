[
    {
        "label": "GXByteBuffer",
        "importPath": "gurux_dlms.GXByteBuffer",
        "description": "gurux_dlms.GXByteBuffer",
        "isExtraImport": true,
        "detail": "gurux_dlms.GXByteBuffer",
        "documentation": {}
    },
    {
        "label": "serial",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial",
        "description": "serial",
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "AESGCM",
        "importPath": "cryptography.hazmat.primitives.ciphers.aead",
        "description": "cryptography.hazmat.primitives.ciphers.aead",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives.ciphers.aead",
        "documentation": {}
    },
    {
        "label": "unhexlify",
        "importPath": "binascii",
        "description": "binascii",
        "isExtraImport": true,
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "GXDLMSTranslator",
        "importPath": "gurux_dlms.GXDLMSTranslator",
        "description": "gurux_dlms.GXDLMSTranslator",
        "isExtraImport": true,
        "detail": "gurux_dlms.GXDLMSTranslator",
        "documentation": {}
    },
    {
        "label": "GXDLMSTranslatorMessage",
        "importPath": "gurux_dlms.GXDLMSTranslatorMessage",
        "description": "gurux_dlms.GXDLMSTranslatorMessage",
        "isExtraImport": true,
        "detail": "gurux_dlms.GXDLMSTranslatorMessage",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "evn_schluessel",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "evn_schluessel = \"dein_Schl√ºssel\"\n#MQTT Verwenden (True | False)\nuseMQTT = False\n#MQTT Broker IP adresse Eingeben ohne Port!\nmqttBroker = \"192.168.1.10\"\nmqttuser =\"\"\nmqttpasswort = \"\"\n#Aktuelle Werte auf Console ausgeben (True | False)\nprintValue = True\n#Comport Config/Init",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "useMQTT",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "useMQTT = False\n#MQTT Broker IP adresse Eingeben ohne Port!\nmqttBroker = \"192.168.1.10\"\nmqttuser =\"\"\nmqttpasswort = \"\"\n#Aktuelle Werte auf Console ausgeben (True | False)\nprintValue = True\n#Comport Config/Init\ncomport = \"/dev/ttyUSB0\"\n#MQTT Init",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "mqttBroker",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "mqttBroker = \"192.168.1.10\"\nmqttuser =\"\"\nmqttpasswort = \"\"\n#Aktuelle Werte auf Console ausgeben (True | False)\nprintValue = True\n#Comport Config/Init\ncomport = \"/dev/ttyUSB0\"\n#MQTT Init\nif useMQTT:\n    try:",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "mqttpasswort",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "mqttpasswort = \"\"\n#Aktuelle Werte auf Console ausgeben (True | False)\nprintValue = True\n#Comport Config/Init\ncomport = \"/dev/ttyUSB0\"\n#MQTT Init\nif useMQTT:\n    try:\n        client = mqtt.Client(\"SmartMeter\")\n        client.username_pw_set(mqttuser, mqttpasswort)",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "printValue",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "printValue = True\n#Comport Config/Init\ncomport = \"/dev/ttyUSB0\"\n#MQTT Init\nif useMQTT:\n    try:\n        client = mqtt.Client(\"SmartMeter\")\n        client.username_pw_set(mqttuser, mqttpasswort)\n        client.connect(mqttBroker, port=1883)\n    except:",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "comport",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "comport = \"/dev/ttyUSB0\"\n#MQTT Init\nif useMQTT:\n    try:\n        client = mqtt.Client(\"SmartMeter\")\n        client.username_pw_set(mqttuser, mqttpasswort)\n        client.connect(mqttBroker, port=1883)\n    except:\n        print(\"Die Ip Adresse des Brokers ist falsch!\")\n        sys.exit()",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "tr",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "tr = GXDLMSTranslator()\ntr.blockCipherKey = GXByteBuffer(evn_schluessel)\ntr.comments = True\nser = serial.Serial( port=comport,\n         baudrate=2400,\n         bytesize=serial.EIGHTBITS,\n         parity=serial.PARITY_NONE,\n)\nwhile 1:\n    daten = ser.read(size=282).hex()",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "tr.blockCipherKey",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "tr.blockCipherKey = GXByteBuffer(evn_schluessel)\ntr.comments = True\nser = serial.Serial( port=comport,\n         baudrate=2400,\n         bytesize=serial.EIGHTBITS,\n         parity=serial.PARITY_NONE,\n)\nwhile 1:\n    daten = ser.read(size=282).hex()\n    print(daten)",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "tr.comments",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "tr.comments = True\nser = serial.Serial( port=comport,\n         baudrate=2400,\n         bytesize=serial.EIGHTBITS,\n         parity=serial.PARITY_NONE,\n)\nwhile 1:\n    daten = ser.read(size=282).hex()\n    print(daten)\n    msg = GXDLMSTranslatorMessage()",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    },
    {
        "label": "ser",
        "kind": 5,
        "importPath": "EvnSmartmeterMQTTKaifaMA309",
        "description": "EvnSmartmeterMQTTKaifaMA309",
        "peekOfCode": "ser = serial.Serial( port=comport,\n         baudrate=2400,\n         bytesize=serial.EIGHTBITS,\n         parity=serial.PARITY_NONE,\n)\nwhile 1:\n    daten = ser.read(size=282).hex()\n    print(daten)\n    msg = GXDLMSTranslatorMessage()\n    msg.message = GXByteBuffer(daten)",
        "detail": "EvnSmartmeterMQTTKaifaMA309",
        "documentation": {}
    }
]