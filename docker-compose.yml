version: '3.8'
services:
  # Mosquitto MQTT Broker
  mosquitto:
    container_name: smartmeter_mosquitto
    image: eclipse-mosquitto
    ports:
      - $mosquittoPort:1883
      - '9001:9001'
    restart: unless-stopped
    volumes:
      - './config/mosquitto.conf:/mosquitto/config/mosquitto.conf'
    networks:
      - smartmeterNetwork
  
  # InfluxDB for Storing data
  influxdb:
    container_name: smartmeter_influxdb
    image: 'influxdb:1.8'
    restart: unless-stopped
    ports:
      - $influxPort:8086
    volumes:
      - $PWD/data/influxDB:/var/lib/influxdb
    environment:
      - INFLUXDB_DATA_ENGINE=tsm1
      - INFLUXDB_REPORTING_DISABLED=false
      - INFLUXDB_ADMIN_USER=${influxdbAdminUser}
      - INFLUXDB_ADMIN_PASSWORD=${influxdbAdminPassword}
      - INFLUXDB_USER=${influxdbUser}
      - INFLUXDB_USER_PASSWORD=${influxdbUserPassword}
      - INFLUXDB_DB=${influxdbDatabase}
      - INFLUXDB_HTTP_LOG_ENABLED=false
      - INFLUXDB_META_LOGGING_ENABLED=false
      - INFLUXDB_DATA_QUERY_LOG_ENABLED=false
      - INFLUXDB_LOGGING_LEVEL=warn
      - TZ=Europe/Berlin
    networks:
      - smartmeterNetwork

  # Grafana for Visualizing data
  grafana:
    container_name: smartmeter_grafana
    image: grafana/grafana:10.0.3
    ports: 
      - $grafanaPort:3000
    user: "1000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=$grafanaRootPassword
      - influxdbUser=$influxdbUser
    volumes:
      - $PWD/data/grafana:/var/lib/grafana
      - $PWD/config/grafana_datasource.yml:/etc/grafana/provisioning/datasources/automatic.yml
      - $PWD/config/grafana_dashboard.yml:/etc/grafana/provisioning/dashboards/default.yml
    networks:
      - smartmeterNetwork

  # NodeRed for automatic insertion into db
  node_red:
    container_name: smartmeter_node_red
    build:
      context: .
      dockerfile: Dockerfile-NodeRed
    restart: unless-stopped
    depends_on:
      - mosquitto
      - influxdb
    ports:
      - $nodeRedPort:1880
    volumes:
      -  $PWD/data/nodeRed:/data
    networks:
      - smartmeterNetwork

  # Python SmartMeter reader Script
  reader:
    container_name: smartmeter_pyreader
    depends_on:
      - mosquitto
    build: 
      context: .
    privileged: true # needed for accessing usb
    restart: unless-stopped
    environment:
      - COMPORT=/dev/ttyUSB0
      - KEY=$ReaderKey
      - LOG_LEVEL=1 # 0 - nothing; 1 - only debug; 2 - debug and data
      - USE_MQTT=True
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=$mosquittoPort
      # - MQTT_USER=
      # - MQTT_PASSWORD=
    networks:
      - smartmeterNetwork
  
networks:
  smartmeterNetwork:
    driver: bridge
    external: true